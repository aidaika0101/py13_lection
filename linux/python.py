

#  PostgresSQL  - система управления базами данных (СУБД/DBMS)
# Это ряд программ и инструментов позваляющих создовать БД, 
# Управлять ею и манипулировать данными внутри(CRUD)
 
#  Postgres - сама база данных она объектно реляционная то есть
#  данные хранятся  в виде таблийы имеют связи между собой

# SQL (Structured Query language) - декларативный язык структурированных запросов 
# он применяется для создания и получения данных при помощи запросов в БД



# -------------------------------------------
#  Типы полей в Postgres
# Numeric Types(числовые)
    # a. smallint(2 bytes) -> -32767 to 32767
    # b. integer(4 bytes) -> -2.147.... to 2.147
    # c. bigint(8 bytes) -> .....
    # d. real(4bytes) -> число с павающей точкой, вещественное
    # e. serial (4bytes) _> integer, auto-increment
    

# Character types(символьные типы(строковые)):
    # a. varchar(кол-во символов) -- еслы мы укажем 50 символов а заполним только 10 то остальные будут своьодны Макс 255
    # b. char (кол-во символов)-> еслли мы укажем 50 символов а заполним только 10 то остальные будут заполнены  пробелом Макс 255
    # c. text() -> неогр кол -во символов

#  Boolen Type
    # a. boolen(1 bytes) -> True/False-------------
#  команда для выхода в бд через юзера postgres:
# sudo -u postgres psql
#  команда для входа
# exit
# \q

# команда для входа в своего юзера
# psql
# --------------------------
# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1';
#
# изменение пароля
# ALTER USER 'username' WITH PASSWORD '1';
# 
# создание бд
# CREATE DATABASE 'name';

# \du - все юзеры
#  \l - список всех бд
#  'dt - все таблицы (нужно подключиться к бд заранее)
# \d 'name' - подробная информация про таблицу (нужно подлючиться к бд заранее)
#  \c 'name' - команда для подколючения к-= бд

# date -> календарная дата (год.месяц.день)

# location --> координатная точка (x,y) - (245. -12)

# enumurate types:
#    ('a', 'b', 'c')
#    GREATE TYPE <any name> AS ENUM ('Happy', 'Sad', 'Mad'):

# ----------------------------------------------------
#  команда для выхода в бд через юзера postgres:
# sudo -u postgres psql
#  команда для входа
# exit
# \q

# команда для входа в своего юзера
# psql
# --------------------------
# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1';
#
# изменение пароля----
# ALTER USER 'username' WITH PASSWORD '1';
# 
# создание бд
# CREATE DATABASE 'name';

# \du - все юзеры
#  \l - список всех бд
#  'dt - все таблицы (нужно подключиться к бд заранее)
# \d 'name' - подробная информация про таблицу (нужно подлючиться к бд заранее)
#  \c 'name' - команда для подколючения к бд



# ------------------------------------------------------------------





# команда для создания таблицы
# CREATE TABLE <tableName> (
#        <column> <type>,
# )
# 
# CREATE TABLE FILMS(
#    code char(5),
#    title varchar(100)
#    date date,
#    genre varchar(50),
#    budget integer,
#    country varchar(50),
#    id serial
# );

# DROP TABLE <name>; - удаление таблицы
# команда для добавления данных в таблицу
# INSERT INTO <tablename> [(columns)] VALUES (data), (data);
# test_db=# INSERT INTO films (code, title, budget, date, genre, country) VALUES
# test_db-# ('AU56', 'Lord of the rings', 100000000, '2001-06-12', 'fantasy', 'USA'),
# test_db-# ('KRIE', 'Hangout', 100000, '2010-06-12', 'comedy', 'USA'),
# test_db-# ('QWER', 'Zita and Gita', 100000, '1999-01-01', 'drama', 'India')



# командда для обнавлениях данных
# UPDATE <table> SET <column> = <new_value> WHERE <column> = <value>;

# команда для удаления данных
#  DELETE FROM <table> WHERE <column> = <value>;

# --------------------------------------

# ограничения:
# 1. NOT NULL -обязательно к запалению
# 2. UNIQUE - то что будут хранятся только уникальные данные
# 3. CHECK - > CHEK age > -1 -ограничение проверки на условия
# 4. PRIMATY KEY( ДЛЯ УСТАНОВКИ идентификатора данных в таблице)
# 5. FOREING KEY(для установки связей между таблицами)







#  Linux commands
# Ctrl + alt + T - команда открытия терминала на macos -> через поиск
#  ~ - символ домашней директории
# / - cимвол корневой директории
#  . - обазначает текущую деркторию
#  .. - обозначает предыдушию директорию


# ls -> команда для вывода всех директории (папка) и файлов в текющ
# 2.cd (change directory) - комната для перехода из одной директории в другую
#3. mkdir  - создает дерктории 
# 4.touch - создает файл 
# 5. rmdir - удаляет пустую директорию
# 6. rm - удаляет файл
# 7. rm - rf удаляет вообще все
# 8/ pwd (print eorkuind directory) -выводит путь до текущей директории
# 9. cp  - копирует файл или директорию в указонное место 
#                  cp<название><куда> 
# 10. mv - команда для перемешения файла или директории, а также для переименоваывания файла или директории 
#                  переименовыванные: mv john.txt jamie.txt
#                  перемещение: mv john.txt directory
# 11. - cat - показывает содержание файла

# 12 - nano - открывает файл для редактирование в графическом интерфейсе Nano
#    *если нет файла то нано создаст новый





#  PostgresSQL  - система управления базами данных (СУБД/DBMS)
# Это ряд программ и инструментов позваляющих создовать БД, 
# Управлять ею и манипулировать данными внутри(CRUD)
 
#  Postgres - сама база данных она объектно реляционная то есть
#  данные хранятся  в виде таблийы имеют связи между собой

# SQL (Structured Query language) - декларативный язык структурированных запросов 
# он применяется для создания и получения данных при помощи запросов в БД



# -------------------------------------------
#  Типы полей в Postgres
# Numeric Types(числовые)
    # a. smallint(2 bytes) -> -32767 to 32767
    # b. integer(4 bytes) -> -2.147.... to 2.147
    # c. bigint(8 bytes) -> .....
    # d. real(4bytes) -> число с павающей точкой, вещественное
    # e. serial (4bytes) _> integer, auto-increment
    

# Character types(символьные типы(строковые)):
    # a. varchar(кол-во символов) -- еслы мы укажем 50 символов а заполним только 10 то остальные будут своьодны Макс 255
    # b. char (кол-во символов)-> еслли мы укажем 50 символов а заполним только 10 то остальные будут заполнены  пробелом Макс 255
    # c. text() -> неогр кол -во символов

#  Boolen Type
    # a. boolen(1 bytes) -> True/False-------------
#  команда для выхода в бд через юзера postgres:
# sudo -u postgres psql
#  команда для входа
# exit
# \q

# команда для входа в своего юзера
# psql
# --------------------------
# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1';
#
# изменение пароля
# ALTER USER 'username' WITH PASSWORD '1';
# 
# создание бд
# CREATE DATABASE 'name';

# \du - все юзеры
#  \l - список всех бд
#  'dt - все таблицы (нужно подключиться к бд заранее)
# \d 'name' - подробная информация про таблицу (нужно подлючиться к бд заранее)
#  \c 'name' - команда для подколючения к-= бд

# date -> календарная дата (год.месяц.день)

# location --> координатная точка (x,y) - (245. -12)

# enumurate types:
#    ('a', 'b', 'c')
#    GREATE TYPE <any name> AS ENUM ('Happy', 'Sad', 'Mad'):

# ----------------------------------------------------
#  команда для выхода в бд через юзера postgres:
# sudo -u postgres psql
#  команда для входа
# exit
# \q

# команда для входа в своего юзера
# psql
# --------------------------
# создание суперюзера
# CREATE ROLE 'username' SUPERUSER LOGIN PASSWORD '1';
#
# изменение пароля----
# ALTER USER 'username' WITH PASSWORD '1';
# 
# создание бд
# CREATE DATABASE 'name';

# \du - все юзеры
#  \l - список всех бд
#  'dt - все таблицы (нужно подключиться к бд заранее)
# \d 'name' - подробная информация про таблицу (нужно подлючиться к бд заранее)
#  \c 'name' - команда для подколючения к 






# ------------------------
# экспорт бд(дамG)
# pg_dumb -U <username> -d <dbname> -f  <filname>
# импорт
# psql -U <username> -d <dbname> -f <filname>

#  ORDER BY : ПОЗВАЛЯЕТ НАМ СОРТИРОВАТЬ выводящие данные по убывванию или возрастанию ASC(по возрастанию) и DESC (по убыванию)
# Синтаксис : SELECT <row> FROM <tablename> ORDER BY <row> [ASC\DESC] ;

# LIMIT : ставит ограничение в кол-во получаемых данных

#  WHERE : используется для фильтрации по полям . будут выводится толькло те данные которые соответсвуют условию оператора WHERE
# СИНТАКСИС: SELECT <row> FROM <tablename> WHERE <row> = 'чем либо';

#  LIKE: Выводит результат который соответсувует введеному шаблону для строк. Чувствителен к регистру
# ILIKE : тоже самое только не зависит от регистра
#  синтаксис: SELECT <row> FROM <tablename> WHERE <row> LIKE/ILIKE 'чем либо';

# AND оператор и, для множественных условий
# IN: WHERE <row> in (1,2,3,4);




# ------------------------------------------------------

# связи между таблицами (relations):
# 1.один к одному (One to One) - человек и паспорт
# в одну из таблиц добавляется поле fk и дается огранричение unique
# 2. один ко многим (One to Many) - человек и банковские карты
# в таблицу много(банковкие карты ) доб. поле fk
# 3. много ко  многим (Many to Many) - Студенты и преподы создается вспомогательная 3ья таблица со связями
# 


#  7. вытащить все произведения в которых sourse = Moby и кол-во параграфов меньше 100
#  SELECT title, source, totalparagraphs FROM work
#  WHERE source='Moby' and totalparagraphs < 100;

# 7.Выведите среднее количество реплик героев в произведении ‘a’,
# регистр не должен иметь значения.Romeo and Juliet’.

# SELECT AVG(c.speechcount) FROM character c JOIN charater_work k ON c.charid=k.charid
# JOIN work w ON w.title='Rameo and Juliet';
# 